@page "/"
@using LandsatReflectance.UI.Models

<PageTitle>Home</PageTitle>


@if (CurrentUserService.IsAuthenticated)
{
    <div class="pa-4">
        @RenderTargetsList()
    </div>
}
else
{
    <div class="flex items-center justify-center pa-4 w-full h-full">
        <div class="flex items-center justify-center pa-4 mx-36 bg-[#2a313c] border border-[#353c44]">
            Create an account to save your targets!
        </div>
    </div>
}

@code {

@* ReSharper disable UnusedParameter.Local *@
    private RenderFragment RenderTargetsList() => __builder =>
@* ReSharper restore UnusedParameter.Local *@
    {
        <div class="flex flex-col gap-3 pa-4 mx-24 bg-[#2a313c] border border-[#353c44]">
            <div class="flex justify-between items-center">
                <p class="text-xl font-bold">
                    <MudIcon Size="Size.Large" Icon="@Icons.Material.Filled.SatelliteAlt" Class="pr-2"/>
                    Your Targets
                </p>
                
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.Refresh"
                               OnClick="@ReInitDictionary" />
            </div>

            <div class="flex flex-col gap-3">
                @if (CurrentTargetsService.IsLoadingTargets)
                {
                    <div class="flex flex-col gap-4 justify-center items-center">
                        <p class="font-bold text-lg">Loading your targets ...</p>
                        <MudProgressLinear Indeterminate Color="@Color.Primary"/>
                    </div>
                }
                else
                {
                    @foreach (var (target, sceneData) in _targetSceneDataMap.OrderBy(kv => kv.Key.Id))
                    {
                        @RenderTargetItem(target, sceneData)
                    }
                }
            </div>
        </div>
    };

@* ReSharper disable UnusedParameter.Local *@
    private RenderFragment RenderTargetItem(Target target, SceneData? sceneData) => __builder =>
@* ReSharper restore UnusedParameter.Local *@
    {
        RenderFragment Something(string valueName, string value) => _ =>  // don't rename this
        {
            <div>
                <p class="font-bold text-xs">
                    @valueName
                </p>
                <p class="text-xs">
                    @value
                </p>
            </div>
        };

        <div class="relative flex gap-4 items-center justify-between pa-3 bg-[#262c36]">
            
            <div class="flex flex-shrink-0 items-center gap-4">
                @if (sceneData is null)
                {
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="55px" Height="55px" />
                }
                else
                {
                    <!-- BUG: Tailwind Styles not working ??? -->
                    <img src="@sceneData.ThumbnailPath" alt="" style="height: 55px; width: 55px" />
                }

                <div class="flex flex-col gap-1">
                    <div class="flex gap-4 items-center">
                        <p class="font-bold">
                            @($"{target.Latitude:F}\u00b0N, {target.Longitude:F}\u00b0W")
                        </p>

                        <p class="font-bold text-[0.55rem]">
                            @target.Id
                        </p>
                    </div>

                    <div class="flex gap-4">
                        @Something("Path", target.Path.ToString())
                        @Something("Row", target.Row.ToString())
                    </div>
                </div>
            </div>
            
            @{
                var minCloudCover = target.MinCloudCoverFilter * 100;
                var maxCloudCover = target.MaxCloudCoverFilter * 100;
            }

            <div class="absolute left-1/2 transform -translate-x-1/2">
                <p class="-mb-4 text-center font-bold text-xs">Cloud Cover Filter Range</p>
                
                <MudRangeSlider Value="@minCloudCover"
                                UpperValue="@maxCloudCover"
                                Min="0" Max="100"
                                Disabled
                                ValueLabel
                                Size="@Size.Small"
                                Class="cursor-not-allowed opacity-50 outline-none ring-0"/>

                <p class="-mt-4 text-center font-bold text-[0.65rem]">
                    @(minCloudCover) - @(maxCloudCover)
                </p>
            </div>
            
            <div class="flex flex-shrink-0 text-right gap-2">
                <MudButton Variant="@Variant.Outlined" Size="@Size.Small"
                           OnClick="@(_ => NavigationManager.NavigateTo($"TargetDetails?target-id={target.Id}"))">
                    View Detailed
                </MudButton>
                
                @RenderTargetDeleteItem(target)
            </div>

        </div>
    };

@* ReSharper disable UnusedParameter.Local *@
    private RenderFragment RenderTargetDeleteItem(Target target) => __builder =>
@* ReSharper restore UnusedParameter.Local *@
    {
        <MudMenu AnchorOrigin="@Origin.CenterLeft"
                 TransformOrigin="@Origin.CenterRight">
            <ActivatorContent>
                <div class="flex justify-between items-center">
                    <MudIconButton Size="@Size.Small" Color="Color.Error" Icon="@Icons.Material.Filled.Delete"/>
                </div>
            </ActivatorContent>
            <ChildContent>
                <div class="flex flex-col justify-between items-center gap-3 pa-3 border rounded border-[#353c44]">
                    <div class="flex flex-col justify-between items-center">
                        <p>Confirm Deletion of</p>
                        <p class="font-bold">
                            @($"{target.Latitude:F}\u00b0N, {target.Longitude:F}\u00b0W")
                        </p>
                    </div>
                    <div class="flex gap-4">
                        <MudButton Size="@Size.Small" Variant="@Variant.Outlined" Color="@Color.Error"
                                   OnClick="@(_ => TryDeleteTarget(target))">
                            Delete
                        </MudButton>
                        <MudButton Size="@Size.Small" Variant="@Variant.Outlined">
                            Cancel
                        </MudButton>
                    </div>
                </div>
            </ChildContent>
        </MudMenu>
    };

}