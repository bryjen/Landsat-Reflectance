@page "/TargetDetails"
@using MudBlazor.Utilities
@*
@page "/TargetDetails?target-id={GUID}"
*@

<div class="flex flex-col pa-4">
    @if (_errorMsg is not null && !string.IsNullOrWhiteSpace(_errorMsg))
    {
        @RenderErrorMsg
    }
    else
    {
        @RenderNormalView
    }
</div>



@code {

@* ReSharper disable UnusedParameter.Local *@
    private RenderFragment RenderErrorMsg => __builder =>
@* ReSharper restore UnusedParameter.Local *@
    {
        <MudAlert Severity="@Severity.Error">
            @_errorMsg
        </MudAlert>
    };
    

@* ReSharper disable UnusedParameter.Local *@
    // View rendered when no errors are present
    private RenderFragment RenderNormalView => __builder =>
@* ReSharper restore UnusedParameter.Local *@
    {
        <div class="flex items-center justify-between">
            <MudButton StartIcon="@Icons.Material.Filled.ArrowLeft"
                       Variant="@Variant.Outlined"
                       Size="@Size.Small"
                       OnClick="@(_ => NavigationManager.NavigateTo("/"))"
            >
                Home
            </MudButton>
        </div>

        <MudTabs Position="@Position.Top"
                 Outlined
                 Rounded
                 Border
                 ApplyEffectsToContainer
                 Class="mt-8 min-h-[75vh]"
                 PanelClass="pa-6">

            <MudTabPanel Icon="@Icons.Material.Filled.Map" Text="Overview">
                @RenderOverviewTab
            </MudTabPanel>

            <MudTabPanel Icon="@Icons.Material.Filled.ZoomInMap" Text="Pixels">
                <div class="flex items-center justify-center w-full h-full">
                    <p>Content 1</p>
                </div>
            </MudTabPanel>
        </MudTabs>
    };

@* ReSharper disable UnusedParameter.Local *@
    private RenderFragment RenderOverviewTab => __builder =>
@* ReSharper restore UnusedParameter.Local *@
    {
        <div class="relative flex flex-col items-center justify-center w-full h-full">
            @if (_isLoading)
            {
                <MudProgressCircular Indeterminate Size="Size.Large" Color="Color.Primary"/>
                <p class="font-bold text-xl text-white">
                    @_loadingMsg
                </p>
            }

            @if (_sceneDataToImgStrMap.Count > 0)
            {
                var imageStyles = new StyleBuilder()
                    .AddStyle($"width: {_imageZoom}%")
                    .Build();
                
                @RenderControlPanelOverlay

                @*
                <img id="SceneImage" alt="image" src="@(_sceneDatas[_currentSceneIndex].BrowsePath)"
                     class="" style="@imageStyles"/>
*@

                var base64Str = _sceneDataToImgStrMap.Values.ToArray()[_currentSceneIndex];
                var alt = $"data:image/png;base64,{base64Str}";
                <img id="SceneImage" alt="image" src="@alt"
                     class="" style="@imageStyles"/>
            }
        </div>
    };

    
@* ReSharper disable UnusedParameter.Local *@
    private RenderFragment RenderControlPanelOverlay => __builder =>
@* ReSharper restore UnusedParameter.Local *@
    {
        <div class="w-4/12 absolute top-4 left-4 flex flex-col gap-2 p-4 bg-[#2a313c] border border-[#353c44]">
            
            <p class="font-bold">
                Image Controls:
            </p>

            <MudDivider Style="border-color: #353c44"/>
            
            <p class="text-sm">
                @(new MarkupString($"<b>Zoom</b>: {_imageZoom}%"))
            </p>
            <div class="flex gap-4">
                <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.ZoomIn"/>
                <MudSlider T="@double" @bind-Value="@_imageZoom" Min="20.0" Max="100.0" Step="0.1"/>
                <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.ZoomOut"/>
            </div>
            
            <div class="flex items-center gap-4 pt-3">
                <MudIconButton Icon="@Icons.Material.Filled.ArrowLeft"
                               Variant="@Variant.Outlined"
                               Size="@Size.Small"
                               Disabled="@(_currentSceneIndex <= 0)"
                               OnClick="@(_ => { _currentSceneIndex--; _showImageLoadingDelayWarning = false; })"
                />

                <MudIconButton Icon="@Icons.Material.Filled.ArrowRight"
                               Variant="@Variant.Outlined"
                               Size="@Size.Small"
                               Disabled="@(_currentSceneIndex >= _sceneDataToImgStrMap.Count - 1)"
                               OnClick="@(_ => { _currentSceneIndex++; _showImageLoadingDelayWarning = false; })"
                />

                <p class="select-none">
                    @(new MarkupString($"<b>Current Image</b>: {_currentSceneIndex + 1}/{_sceneDataToImgStrMap.Count}"))
                </p>
            </div>
            
            @if (_showImageLoadingDelayWarning)
            {
                <p class="text-xs">* Images make take a while to load</p>
            }

            <br class="select-none" />

            @if (_target is not null)
            {
                var currentScene = _sceneDataToImgStrMap.Keys.ToArray()[_currentSceneIndex];
                
                <MudButton Size="Size.Small"
                           OnClick="@(_ => _showQuickSummary = !_showQuickSummary)">
                    <p class="font-bold normal-case">
                        Toggle Quick Summary:
                    </p>
                </MudButton>

                <MudCollapse Expanded="@_showQuickSummary">
                    <MudDivider Class="mb-2" Style="border-color: #353c44"/>

                    <div class="grid grid-cols-[30%_70%] gap-y-3">
                        <p class="flex items-center font-bold">Target ID:</p>
                        <p class="flex items-center text-sm">@_target.Id</p>

                        <p class="flex items-center font-bold">Path, Row:</p>
                        <p class="flex items-center text-sm whitespace-pre">
                            @(new MarkupString($"<b>{_target.Path}</b>, <b>{_target.Row}</b>"))
                        </p>

                        <p class="flex items-center font-bold">Lat, Long:</p>
                        <p class="flex items-center text-sm whitespace-pre">
                            @(new MarkupString($"<b>{_target.Latitude:F2}</b>\u00b0N, <b>{_target.Longitude:F2}</b>\u00b0W"))
                        </p>

                        @*  Evaluate whether below should be displayed here
                        <p class="flex items-center font-bold">Min. CC:</p>
                        <p class="flex items-center text-xs">@_target.MinCloudCoverFilter</p>

                        <p class="flex items-center font-bold">Max. CC:</p>
                        <p class="flex items-center text-xs">@_target.MaxCloudCoverFilter</p>
*@

                        @* Spaces basically *@
                        @for (int i = 0; i < 4; i++)
                        {
                            <p class="select-none"/>
                        }

                        @{
                            var locValue = $"{_target.Latitude}+{_target.Longitude}";
                            var googleMapsUri = $"http://maps.google.com/maps?z=12&t=m&q=loc:{locValue}";

                            var classes = new CssBuilder()
                                .AddClass("flex")
                                .AddClass("items-center")
                                .AddClass("font-bold")
                                .AddClass("underline")
                                .AddClass("text-sky-400", _locationData is not null)
                                .Build();
                        }

                        <a href="@googleMapsUri" target="_blank" class="@classes">
                            Location:
                        </a>
                        <div class="flex items-center gap-2">
                            @if (_locationData is not null)
                            {
                                <MudIcon Size="@Size.Small" Icon="@Icons.Material.Filled.LocationOn" />
                                <p class="flex items-center text-xs">
                                    @($"{_locationData.City}, {_locationData.Country}")
                                </p>
                            }
                            else
                            {
                                <MudIcon Size="@Size.Small" Icon="@Icons.Material.Filled.Warning" />
                                <p class="flex items-center text-xs">
                                    Could not load any location data
                                </p>
                            }
                        </div>

                        <p class="flex items-center font-bold">Display ID:</p>
                        <p class="flex items-center text-xs">@currentScene.DisplayId</p>
                        
                        <p class="flex items-center font-bold">Entity ID:</p>
                        <p class="flex items-center text-xs">@currentScene.EntityId</p>

                        <p class="flex items-center font-bold">Publish Date (UTC):</p>
                        <p class="flex items-center text-xs">@(currentScene.PublishDate.UtcDateTime.ToString("g"))</p>
                    </div>
                </MudCollapse>
            }
        </div>
    };
}